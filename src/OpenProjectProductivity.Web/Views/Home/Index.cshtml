@model List<OpenProductivity.Web.DTOs.MemberStatisticDto>
@{
    ViewData["Title"] = "Project Dashboard";

    var selectedProjectId = ViewBag.ProjectId as int?;
    var selectedGoalPeriod = ViewBag.GoalPeriod as string;
    var projects = ViewBag.Projects as List<(int Id, string Name)>;
    var goalPeriods = ViewBag.GoalPeriods as List<string>;
}

<form method="get" class="mb-6 grid grid-cols-1 md:grid-cols-3 gap-4">
    <!-- Project Dropdown -->
    <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Project</label>
        <select name="projectId" class="block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500">
            <option value="">Select Project</option>
            @foreach (var project in projects)
            {
                <text>
                    <option value="@project.Id" @(selectedProjectId.HasValue && selectedProjectId.Value == project.Id ? "selected" : "")>@project.Name</option>
                </text>
            }
        </select>
    </div>

    <!-- Goal Period Dropdown -->
    <div>
        <label class="block text-sm font-medium text-gray-700 mb-1">Goal Period</label>
        <select name="goalPeriod" class="block w-full border border-gray-300 rounded-md shadow-sm p-2 focus:ring-blue-500 focus:border-blue-500">
            <option value="">Select Goal Period</option>
            @foreach (var gp in goalPeriods)
            {
                <text>
                    <option value="@gp" @(selectedGoalPeriod == gp ? "selected" : "")>@gp</option>
                </text>
            }
        </select>
    </div>

    <!-- Submit Button -->
    <div class="flex items-end">
        <button type="submit" class="w-full bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-700">
            Filter
        </button>
    </div>
</form>

@if (Model != null && Model.Any())
{
    <!-- Chart -->
    <div class="mb-6">
        <canvas id="productivityChart" style="height: 300px;"></canvas>
    </div>

    <!-- Table -->
    <div class="overflow-x-auto">
        <table id="memberTable" class="min-w-full bg-white border border-gray-200 rounded-md shadow-md">
            <thead class="bg-blue-500">
                <tr>
                    <th class="px-4 py-2 text-center text-sm font-medium text-white">Member Name</th>
                    <th class="px-4 py-2 text-center text-sm font-medium text-white">User Stories</th>
                    <th class="px-4 py-2 text-center text-sm font-medium text-white">Issues</th>
                    <th class="px-4 py-2 text-center text-sm font-medium text-white">Completed Tasks</th>
                    <th class="px-4 py-2 text-center text-sm font-medium text-white">Avg Duration (days)</th>
                    <th class="px-4 py-2 text-center text-sm font-medium text-white">Rework Count</th>
                    <th class="px-4 py-2 text-center text-sm font-medium text-white">Productivity Score</th>
                    <th class="px-4 py-2 text-center text-sm font-medium text-white">Action</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
                @foreach (var member in Model)
                {
                    <tr>
                        <td class="px-4 py-2">@member.MemberName</td>
                        <td class="px-4 py-2 text-center">@member.TotalUserStories</td>
                        <td class="px-4 py-2 text-center">@member.TotalIssues</td>
                        <td class="px-4 py-2 text-center">@member.CompletedTasks</td>
                        <td class="px-4 py-2 text-center">@Math.Round(member.AvgDurationDays, 2)</td>
                        <td class="px-4 py-2 text-center">@member.ReworkCount</td>
                        <td class="px-4 py-2">
                            <div class="w-full bg-gray-200 rounded-full h-4 relative">
                                <div class="bg-green-500 h-4 rounded-full" style="width:@member.ProductivityScore%"></div>
                                <span class="absolute right-1 top-0 text-xs font-semibold text-white">@Math.Round(member.ProductivityScore, 1)</span>
                            </div>
                        </td>
                        <td class="px-4 py-2 text-center">
                            <a class="inline-block bg-blue-500 text-white px-3 py-1 rounded-md text-sm hover:bg-blue-600"
                               href="@Url.Action("MemberTasks", "Home", new { projectId = selectedProjectId, memberId = member.MemberId, goalPeriod = selectedGoalPeriod })">
                                👁️ View Task
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else if (selectedProjectId != null && selectedGoalPeriod != null)
{
    <p class="text-gray-500 mt-4">No data available for selected project and goal period.</p>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            // Initialize DataTable
            $('#memberTable').DataTable({
                paging: true,
                searching: true,
                ordering: true,
                info: true,
                pageLength: 10,
                responsive: true,
                columnDefs: [
                    { orderable: false, targets: 7 } // Disable sorting for Action column
                ]
            });

            // Prepare Chart.js data
            const memberNames = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Select(m => m.MemberName)));
            const productivityScores = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Select(m => Math.Round(m.ProductivityScore, 1))));
            const completedTasks = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Select(m => m.CompletedTasks)));

            const ctx = document.getElementById('productivityChart').getContext('2d');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: memberNames,
                    datasets: [
                        {
                            label: 'Productivity Score (%)',
                            data: productivityScores,
                            backgroundColor: 'rgba(34, 197, 94, 0.7)',
                            borderColor: 'rgba(34, 197, 94, 1)',
                            borderWidth: 1
                        },
                        {
                            label: 'Completed Tasks',
                            data: completedTasks,
                            backgroundColor: 'rgba(59, 130, 246, 0.7)',
                            borderColor: 'rgba(59, 130, 246, 1)',
                            borderWidth: 1
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false, // smaller height
                    plugins: {
                        legend: { position: 'top' },
                        tooltip: { mode: 'index', intersect: false }
                    },
                    scales: { y: { beginAtZero: true } }
                }
            });
        });
    </script>
}
